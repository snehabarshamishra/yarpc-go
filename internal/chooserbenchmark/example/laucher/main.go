// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"fmt"
	"time"

	bench "go.uber.org/yarpc/internal/chooserbenchmark"
	"go.uber.org/yarpc/internal/chooserbenchmark/example"
)

func benchmark() {
	fmt.Println("round-robin works well when you have homogeneous servers")
	roundRobinConfig := example.RoundRobinWorks
	if err := bench.Run(roundRobinConfig); err != nil {
		panic(err)
	}

	fmt.Println("\nfewest-pending is superior when you have hetergenous servers")
	fewestPendingConfig := example.FewestPendingSuperior
	if err := bench.Run(fewestPendingConfig); err != nil {
		panic(err)
	}

	fmt.Println("\nfewest-pending degrades into round-robin when server capability is much higher than rps generated by clients")
	degradationConfig := example.FewestPendingDegradation
	if err := bench.Run(degradationConfig); err != nil {
		panic(err)
	}
}

func debug() {
	config := &bench.Config{
		ClientGroups: []bench.ClientGroup{
			{
				Name:        "roundrobin",
				Count:       10000,
				RPS:         20,
				Constructor: example.RoundRobin,
			},
			{
				Name:        "pendingheap",
				Count:       10000,
				RPS:         20,
				Constructor: example.PendingHeap,
			},
		},
		ServerGroups: []bench.ServerGroup{
			{
				Name:    "normal",
				Count:   1000,
				Latency: time.Millisecond * 100,
			},
		},
		Duration: 3 * time.Second,
	}
	if err := bench.Run(config); err != nil {
		panic(err)
	}
}

func main() {
	benchmark()
}
