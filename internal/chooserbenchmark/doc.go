// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package chooserbenchmark enable to benchmark the load balancing strategy in
// a single local machine, and visualization to show the results onto terminal.
//
// The `go.uber.org/internal/chooserbenchmark` package tree provides the
// corresponding implementations.
//
// A transportation suite including `peer_identifier.go`, `peer.go`,
// `transport.go` is the minimum functionality set to intercept network
// traffic in local environment.
//
// The Client generate RPS to Server. A request is made when Client send a
// go channel to Server and wait on signal on that channel. Client also have
// metrics like request counter, response counter, and latency histogram.
//
// The Server use a channel of channel as Listener. When receive Request from
// Client, the Server will sleep for a random time generated by a random
// generator obey to log normal distribution.
//
// The `config.go` and `context.go` determine how many clients and servers will
// be created, how long is the benchmark duration, where to output the logs.
// Context is the objects bundle which you can use to reference every single
// client and server. Metrics information could be extracted through context.
//
// The `visualization.go` visualize the metrics onto terminal. It calculate the
// boundary value for request count and histogram frequency, which determine
// the width each star symbol stands for.
package chooserbenchmark
